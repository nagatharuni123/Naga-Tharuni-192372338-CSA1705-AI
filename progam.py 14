@@ -0,0 +1,89 @@
def print_board(board):
    for row in board:
        print("|".join([cell if cell != '' else ' ' for cell in row]))
    print()

def check_winner(board, player):
    for row in board:
        if all([cell == player for cell in row]):
            return True
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]):
        return True
    if all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def is_terminal(board):
    return check_winner(board, 'X') or check_winner(board, 'O') or all(cell != '' for row in board for cell in row)

def evaluate(board):
    if check_winner(board, 'X'):
        return 1
    elif check_winner(board, 'O'):
        return -1
    else:
        return 0

def get_children(board, maximizing_player):
    player = 'X' if maximizing_player else 'O'
    children = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == '':
                new_board = [row[:] for row in board]
                new_board[i][j] = player
                children.append(new_board)
    return children

def alpha_beta(board, depth, alpha, beta, maximizing_player):
    if depth == 0 or is_terminal(board):
        return evaluate(board)
    if maximizing_player:
        max_eval = -float('inf')
        for child in get_children(board, True):
            eval = alpha_beta(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for child in get_children(board, False):
            eval = alpha_beta(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def best_move(board):
    best_score = -float('inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == '':
                board[i][j] = 'X'
                score = alpha_beta(board, 9, -float('inf'), float('inf'), False)
                board[i][j] = ''
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

board = [['X', 'O', 'X'],
         ['O', 'X', ''],
         ['', '', 'O']]

print("Current Board:")
print_board(board)

move = best_move(board)
if move:
    board[move[0]][move[1]] = 'X'

print("Board after Alpha-Beta best move:")
print_board(board)
